-------------- ANTES DE INICIAR --------------

1.- Se debe contar con los siguientes archivos , pero solo se instalan en el ambiente 1 sola vez , no es necesario
siempre instalarlos en la pc , 1 sola vez para todos los proyectos en laravel 
    
    IIS >=8.0 - Este servidor lo instalaremos con las caracteristicas de windows
    Windows Installer 5.0 - https://www.microsoft.com/web/downloads/platform.aspx , descargamos e instalamos
    PHP >=7.0.21 - Este lenguaje de programación lo podremos decargar despues de haber instalado el programa Windows Installer 5.0
    Microsoft Drivers 4.3 (64x) for PHP v7.0 for SQL SERVER in IIS - Estos drivers comunican PHP con SQL SERVER Para la version 7.0 de PHP
    Microsoft Drivers 4.1 (64x) for PHP v7.1 for SQL SERVER in IIS - Estos drivers comunican PHP con SQL SERVER Para la version 7.1 de PHP
    URL Rewrite 2.0 - Lo podremos decargar despues de haber instalado el programa Windows Installer 5.0

    Los archivos o programas anteriores deberan descargarse en orden propuesto
    
    Estos archivos se descargan aparte
	COMPOSER = composer  https://getcomposer.org/ 

    Estos archivos los tiene gilberto

    favicon.ico
    themeforest Dahsboard (Proyecto)
    errores.blade.php
    mantenimiento.blade.php

-------------- LARVEL 5.4 --------------

1.- La version de laravel que se va a utilizar va a ser la "5.4.0"

    1.1.- Para iniciar un nuevo proyecto con esa version vamos a insertar este texto en un CMD  , las primeras dos es por si tenemos
	un proxy (En este caso el de la SSP CDMX)
        
        set http_proxy=10.13.8.3:8080    #el proxy debe cambiar segun sea el caso para http
        set https_proxy=10.13.8.3:8080   #el proxy debe cambiar segun sea el caso para https

        composer create-project laravel/laravel plantilla 5.5 #creamos el proyecto con un nombre en este caso se llamara plantilla
    
    1.1.2 CORTA EL .htaccess DE PUBLIC Y PEGALO EN EL ROOT Y DESPUES renombra EL ARHCIVO server.PHP A index.PHP

    1.1.3 Selecciona la carpeta completa de tu proyecto y ve a propiedades de tu carpeta(proyeto) , ve a la pestaña de seguridad y edita los permisos
    se le tendra que dar acceso de escritura a los usuarios : usuarios y IIS_IUSRS 

    1.1.4 Copia el archivo web.config a la ruta principal del proyecto , el archivo .htaccess ya no servira en este punto por que el servidor IIS no lee el archivo
    .htaccess , ahora leera el archivo web.config ya que ese es su configuración del proyecto en el servidor IIS , no eliminaremos el archivo .htaccess por si decidimos 
    mover el proyecto a servidores apache

    #hasta este punto ya podras visualizar el proyecto funcionando , si todo lo hiciste bien , entonces podras acceder a el mediante la siguiente URL:
    # http://localhost/plantilla

1.2 Configurar el proyecto 
        
    Vamos al archivo que se encuentra en config/app.php 

    1.2.1 name 

        En este apartado pondremos el nombre del proyecto , es importante configurar esta parte

    1.2.2 env (No tocar)

    1.2.3 debug (No tocar) 
   
    1.2.4 url 

        Se complementa con la url de nuestro proyecto , en mi caso queda de esta forma 
        'url' => env('APP_URL', 'http://localhost/plantilla'),
    
    1.2.5 timezone 

        Se modifica por 'America/Mexico_City'

    1.2.6 locale

        Se modifica por 'es' # queremos el idioma en español , aqui debemos descargar el idioma de español
        vamos a la siguiente url : https://github.com/Laraveles/lang-spanish
        Para instalarlo sigue las instrucciones mencionadas de la página web
        no olvides al final poner  en tu cmd la siguiente linea: php artisan laraveles:install-lang
        
    1.2.6 fallback_locale

        Se modifica por 'es' # queremos el idioma en español , aqui debemos descargar el idioma de español
        
    1.2.7 Encryption Key

        'key' No tocar

        'cipher' No tocar

    1.2.8 Logging Configuration

        'log' No tocar

        'log_level' No tocar

1.3.- MENSAJES DE ERROR

        Vamos a customizar los mensajes de error que salen cuando la aplicación no encuentra una ruta o cuando el sistema falla entre otros,
        Para hacer customizable esta parte vamos al archivo que se encuentra dentro de app/Exceptions/Handler.php
        una vez dentro vamos a importar las siguientes clases , quedando de la siguiente manera

        /* CUSTOM */ 
        use Illuminate\Session\TokenMismatchException;
        use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
        use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;
        use ErrorException;
        use InvalidArgumentException;
        use ModelNotFoundException;
        use ReflectionException;
        use FatalThrowableError;
        use Illuminate\Support\Facades\Auth;
        use Illuminate\Http\Request;

        Una vez importadas las clases vamos a modificar el metodo #render($request, Exception $e)
        quedando de la siguiente manera
        
        # INICIA METODO RENDER 
        # INICIA METODO RENDER 
        # INICIA METODO RENDER 
        public function render($request, Exception $e)
        {     

            if( !config('app.debug') ) 
            {   
                // ModelNotFoundException (modelo no encontrado)
                if ($e instanceof ModelNotFoundException)
                {
                    $data = array('code' => 401, 'title' => 'Modelo no encontrado ', 'message' => 'ModelNotFoundException' );
                    return \Response::view('errors.errores', $data , $data['code'] );
                }
                // ReflectionException (modelo no encontrado) se renderea dos veces pero es un bug del 5.3 https://github.com/laravel/framework/issues/17007
                else if ($e instanceof ReflectionException)
                {
                    $data = array('code' => 402, 'title' => 'Modelo no encontrado ', 'message' => 'ReflectionException' );
                    return \Response::view('errors.errores', $data , $data['code'] );
                }
                // MethodNotAllowedHttpException
                else if( $e instanceof MethodNotAllowedHttpException )
                {
                    $data = array('code' => 405, 'title' => 'Método no permitido', 'message' => 'MethodNotAllowedHttpException - tu petición no es la correcta - [GET,POST,PUT,DELETE,HEAD]' );
                    return \Response::view('errors.errores', $data , $data['code'] );
                }
                // TokenMismatchException
                else if( $e instanceof TokenMismatchException )
                {
                    return redirect($request->fullUrl())->with('errores',"Oops! Al parecer no pudiste enviar la información en un tiempo muy largo, Por favor inténtalo de nuevo.");
                }
                // NOT FOUND
                else if( $e instanceof NotFoundHttpException )
                {
                    $data = array('code' => 404, 'title' => 'Página no encontrada', 'message' => 'NotFoundHttpException - Revisa la url a la que intentas navegar' );
                    return \Response::view('errors.errores', $data , $data['code'] );
                }
                // FatalThrowableError
                else if( $e instanceof FatalThrowableError )
                {
                    $data = array('code' => 500, 'title' => 'Error Interno', 'message' => 'FatalThrowableError' );
                    return \Response::view('errors.errores', $data , $data['code'] );
                }
                // ErrorException
                else if( $e instanceof ErrorException )
                {
                    $data = array('code' => 500, 'title' => 'Error Interno', 'message' => 'ErrorException , Intenta cerrar el sistema y volverlo a abrir, si el problema persiste comunicate con el administrador.' 
                    . " [ Mensaje: " . $e->getMessage() ." ] " );
                    return \Response::view('errors.errores', $data , $data['code'] );
                }
                // FatalErrorExceptions
                else if( $e instanceof InvalidArgumentException )
                {
                    $data = array('code' => 500, 'title' => 'Error Interno', 'message' => 'ErrorException , Intenta cerrar el sistema y volverlo a abrir, si el problema persiste comunicate con el administrador.' 
                    . " [ Mensaje: " . $e->getMessage() ." ] " );
                    return \Response::view('errors.errores', $data , $data['code'] );
                }
            }
            return parent::render($request, $e);
        } 
        # TERMINA METODO RENDER
        # TERMINA METODO RENDER
        # TERMINA METODO RENDER

        Ahora hay que copiar el archivo llamado errores.blade.php a la carpeta resources/views/errors 
        y tambien el archivo mantenimiento.blade.php


1.4 MENSAJES DE CORREO 

    dentro del archivo config/mail.php 

    se modificaran estas partes

    'host' => env('MAIL_HOST', ''),
    'port' => env('MAIL_PORT', 587),

    y en el archivo .env se añadiran los siguientes:

    MAIL_FROM_ADDRESS=jgcv27@gmail.com
    MAIL_FROM_NAME=JGCV

1.5 ICONOS y otros

    1.5.1.- Tenemos que copiar el archivo favicon.ico a la carpeta public y remplazar el que ya tenemos , este icono es el oficial de la cdmx
    1.5.2.- Como nuestra plantilla es nueva , no tiene plugins asi que utilizaremos nuestro proyecto "theme forest , dashboard" , mismo que se compro para esta nueva plantilla
            Este proyecto cuenta con bootstrap y con algunos plugins populares que utilizaremos estos estilos y plugins se encuentran 
            en \themeforest\backend-html\backend\assets\global\plugins , no añadire todos debido a que pesan mucho , se añadiran conforme se ocupen
            al principio solo se dejo en los plugins las siguientes carpetas:
            
            bootbox.js
            bootstrap
            bootstrap-colorpicker
            bootstrap-multiselect
            bootstrap-select
            bootstrap-table
            bootstrap-touchspin
            datatables
            datatables-responsive
            datatables-scroller
            datetimepicker
            font-awesome
            jquery
            select2
            sweetalert2
            toastr

1.6 DOCTRINE 

    En esta seccion vamos a instalar doctrine un ORM que nos ayudara con la base de datos, para ello seguiremos este tutorial de su instalacion acorde a nuestra version de laravel
    https://laraveldoctrine.org/docs/current/orm/installation

    1.6.1.- Una vez terminada esta instalación y de haber publicado la configuración procederemos a ir a la siguiente ruta
    dentro del archivo en config/database.php

        Se modificara esta parte 

        'default' => env('DB_CONNECTION', 'sqlsrv'),

        El apartado conecctions quedará de la siguiente manera:
        'connections' => [
            'sqlsrv' => [
                'driver' => 'sqlsrv',
                'host' => env('DB_HOST', 'localhost'),
                'port' => env('DB_PORT', '1433'),
                'database' => env('DB_DATABASE', 'plantilla'),
                'username' => env('DB_USERNAME', 'sa'),
                'password' => env('DB_PASSWORD', 'sql2008r2'),
                'charset' => 'utf8',
                'collation' => 'Modern_Spanish_CI_AI',
                'prefix' => '',
                'strict' => true,  
                'engine' => null,   
            ],     
        ],

        Los demas apartados se queda como estan

    1.6.2.-Procederemos a ir a la siguiente ruta dentro del archivo en config/doctrine.php

        En el apartado de paths , se modificara quedando de esta forma
            'paths'         => [
                base_path('app/Entities'),
            ],

        Esto hace que todas nuestras entities (Modelos) esten dentro de la carpeta Entities dentro de la carpeta app, por lo que tendremos que crear la carpeta
        "Entities" dentro de la carpeta app,

        Dentro de la carpeta Entities copiaremos los archivos de usuarios ,permisos , dispositivos, tal como viene en el archivo de instalación que tiene
        gilberto

        Ahora seguiremos este tutorial: https://isaacearl.com/blog/laravel-doctrine-setup

        Descomentamos la extensión Timestampable y SoftDeleteableExtension

        'extensions' => [
                LaravelDoctrine\Extensions\Timestamps\TimestampableExtension::class,
                LaravelDoctrine\Extensions\SoftDeletes\SoftDeleteableExtension::class,
        ],

        ahora en tu archivo auth.php 

        En la seccion de provider se cambiara por la entidad que usaremos y por el driver doctrine

            'providers' => [

                'users' => [
                    'driver' => 'doctrine',
                'model' => App\Entities\UsuariosMobile\UsuarioMobile::class,
                ],

                // 'users' => [
                //     'driver' => 'database',
                //     'table' => 'users',
                // ],
            ],

       Hasta este punto tu deberas de tener las siguientes librerias
  
        "require": {
            "php": ">=5.6.4",
            "laravel-doctrine/extensions": "1.0.*",
            "laravel-doctrine/migrations": "1.0.*",
            "laravel-doctrine/orm": "1.3.*",
            "laravel/framework": "5.4.*",
            "laravel/passport": "^4.0",
            "laravel/tinker": "~1.0",
            "laraveles/spanish": "^1.0"
        },

    Una vez hecho esto , vamos a copiar los archivos Entities y Daos respectivamente en las rutas de sus proyectos
    
     


1.7 LARAVEL PASSPORT 

    En esta seccion vamos a instalar Passport un Framework que nos ayudara con la autenticación de aplicaciones moviles y darle seguridad a los servicios rest 
    ,para ello seguiremos este tutorial de su instalacion:
    https://laravel.com/docs/5.4/passport


1.7 LARAVEL 


    https://laravel.com/docs/5.4/installation
    
    http://www.maatwebsite.nl/laravel-excel/docs/getting-started#installation
    https://packagist.org/packages/codedge/laravel-fpdf
    https://laravel.com/docs/5.4/redis
    https://laravelcollective.com/docs/5.4/html



1.3.- Nombrar a la aplicacion 

        Todos los archivos de configuracion de laravel estan en la carpeta config
        Por default el directorio app esta bajo App , y ese lo nombra al principio el composer , usado por PSR4 , estandarizacion de procesos ,
        las ventajas son a composer ya que carga las clases automaticamente 

        php artisan app:name <nombre>

    

    1.4.- Archivos

        Todos los archivos de estilo y javacript etc..
        (css,js,imagenes) va en el directorio /public

    1.5.- Vistas

   	 En laravel 5 ya no se hace uso del "make" para regresar una vista , la sintaxis ahora sera 
   	 return view('vista');

2.- INSTALAR EN composer.json EN LA SECCION DE REQUIRED
	       
    "laravelcollective/html": "~5.0",    
    "maatwebsite/excel": "~2.1.0",
    "laravel-doctrine/orm": "^1.2"
    "anouar/fpdf": "^1.0"

2.1.- vamos a CMD como administrador y nos dirigimos a nuestra carpeta de nuestro proyecto y tecleamos  

	composer update
	 
2.2.- Ir al archivo config/app.php y añadir la siguiente linea en el arreglo de providers 

    'Collective\Html\HtmlServiceProvider',
    LaravelDoctrine\ORM\DoctrineServiceProvider::class,
    'Maatwebsite\Excel\ExcelServiceProvider',
    Anouar\Fpdf\FpdfServiceProvider::class,
	 
2.3.- Vamos en el mismo archivo config/app.php en el apartado de aliases poner la siguiente linea:
	 
    'Form' => 'Collective\Html\FormFacade',
    'Html' => 'Collective\Html\HtmlFacade',
    'Excel' => 'Maatwebsite\Excel\Facades\Excel',
    'EntityManager' => LaravelDoctrine\ORM\Facades\EntityManager::class,
    'Fpdf' => Anouar\Fpdf\Facades\Fpdf::class,
    
	 https://github.com/anouarabdsslm/laravel-fpdf/pull/24

2.4.- Empaquetar y enlistar lo instalado, Poner la siguiente linea en CMD   / publih o publicarlo

    php artisan vendor:publish --tag="config"

3.- DOCTRINE

3.1.- Doctrine no necesita ninguna configuracion de la base de datos especial, este framework usa la configuracion de la base de datos de laravel
    (esta configuracion se encuentra en .env), pero si quieres sobreescribir la configuracion , deberas cambiar el arhcivo de configuracion de doctrine 
    en Config/doctrine.php:

    'managers'                  => [
    'default' => [
        'dev'        => env('APP_DEBUG'),
        'meta'       => env('DOCTRINE_METADATA', 'annotations'),
        'connection' => env('DB_CONNECTION', 'mysql'),
        'namespaces' => [
            'App'
        ],

    3.6.- Importante.
    
    Por default , el esqueleto las aplicaciones en laravel, tiene sus propios modelos. en el folder de app/ , vas a necesitar crear tus propias entities y apuntar en el archivo config/doctrine.php , los paths (rutas de carpetas) a el , si no lo haces doctrine va a escaenar todo tu proyecto en busca de las entities y esto puede ser muy tardado

    'paths' => [
        base_path('app/Entities'),
    ],

    !============================================  IMPORTANTE  ============================================!
    MODIFICAR EL ARCHIVO config/auth.php 

    'providers' => [
        'users' => [
            'driver' => 'doctrine', 
            'model' => Proyecto\Entities\Usuario::class,
        ],

        // 'users' => [
        //     'driver' => 'database',
        //     'table' => 'users',
        // ],
    ],

    3.7 .- Algunas ligas de ayuda 
    http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/types.html
    http://www.pedroliveira.pt/ajax-post-with-laravel-5/
    http://laraveldaily.com/theres-no-putpatchdelete-method-or-how-to-build-a-laravel-form-manually/


    php artisan doctrine:generate:entity 
	
    php artisan doctrine:schema:drop --force --em=CUP_USUARIOS
    php artisan doctrine:schema:create --em=CUP_USUARIOS
    php artisan doctrine:schema:update --force --em=CUP_USUARIOS
    php artisan doctrine:generate:entities --em=CUP_USUARIOS

    php artisan doctrine:schema:drop --force --em=default
    php artisan doctrine:schema:create --em=default
    php artisan doctrine:schema:update --force --em=default
    php artisan doctrine:generate:entities --em=default


6.- LOS ARCHIVOS MAS USADOS Y MAS IMPORTANTES SON :
    
    1.- web.php se encuentra en routes/web.php , este archivo indica las rutas de la aplicacion
    2.- El folder views, se encuentra en resources/views , aqui van todas las vistas de la aplicación
    3.- El folder controllers , se encuentra en app/http/controllers , aqui van los controladores 
    4.- El folder Entities, se encuentra en app/Entities , aqui va todo el modelo de datos de la aplicacion
    5.- El archivo .env , se encuentra dentro de la raiz principal y sirve para conexion a bses de datos y ambiente de desarrollo

